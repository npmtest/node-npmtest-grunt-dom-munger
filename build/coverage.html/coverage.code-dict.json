{"/home/travis/build/npmtest/node-npmtest-grunt-dom-munger/test.js":"/* istanbul instrument in package npmtest_grunt_dom_munger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-dom-munger/lib.npmtest_grunt_dom_munger.js":"/* istanbul instrument in package npmtest_grunt_dom_munger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_dom_munger = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_dom_munger = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-dom-munger/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-dom-munger && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_dom_munger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_dom_munger\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_dom_munger.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_grunt_dom_munger.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_dom_munger.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_grunt_dom_munger.__dirname +\n                    '/lib.npmtest_grunt_dom_munger.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-dom-munger/node_modules/grunt-dom-munger/Gruntfile.js":"/*\n * grunt-dom-munger\n * https://github.com/cgross/grunt-dom-munger\n *\n * Copyright (c) 2013 Chris Gross\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        '<%= nodeunit.tests %>',\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      },\n    },\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: ['tmp'],\n    },\n    // Configuration to be run (and then tested).\n    dom_munger: {\n      test: {\n        options: {\n          read: {selector:'link',attribute:'href',writeto:'mylinks',isPath:true},\n          remove: '#removeMe',\n          update: {selector:'html',attribute:'appmode',value:'production'},\n          prefix: {selector:'link',attribute:'href',value:'project-name/'},\n          suffix: {selector:'html',attribute:'version',value:'.0.1'},\n          append: {selector:'body',html:'<div id=\"appended\">Im being appended</div>'},\n          prepend: {selector:'body',html:'<span>Im being prepended</span>'},\n          text: {selector:'title',text:'CHANGED TITLE'},\n          callback: function($, file){\n            $('#sample2').text('Ive been updated via callback');\n            $('#filepath').text('Made from ' + file);\n          }\n        },\n        src: 'test/fixtures/index.html',\n        dest: 'tmp/index.html'\n      },\n      test2: {\n        options: {\n          read: {selector:'script',attribute:'src',writeto:'test',isPath:true}\n        },\n        src: 'test/fixtures/index.html'\n      },\n      test3: {\n        options: {\n          read: [\n            {selector:'link',attribute:'href',writeto:'mylinks',isPath:true},\n            {selector:'script[src]',attribute:'src',writeto:'myscripts',isPath:true}\n          ],\n          remove: ['#removeMe'],\n          update: [{selector:'html',attribute:'appmode',value:'production'}],\n          prefix: [{selector:'link',attribute:'href',value:'project-name/'}],\n          suffix: [{selector:'html',attribute:'version',value:'.0.1'}],\n          append: [{selector:'body',html:'<div id=\"appended\">Im being appended</div>'}],\n          prepend: [{selector:'body',html:'<span>Im being prepended</span>'}],\n          text: [\n            {selector:'title',text:'CHANGED TITLE'},\n            {selector:'#sample2',text:'Ive been updated via callback'},\n            {selector:'#filepath',text:'Made from test/fixtures/index.html'}\n          ],\n        },\n        src: 'test/fixtures/index.html',\n        dest: 'tmp/index.html'\n      },\n      test_order: { //order should be read then remove then any other update operations\n        options: {\n          read: [\n            {selector:'link',attribute:'href',writeto:'links_order',isPath:true},\n            {selector:'script',attribute:'src',writeto:'scripts_order',isPath:true}\n          ],\n          remove: ['script','link'],\n          append: [\n            {selector:'head',html:'<link href=\"concat.css\">'},\n            {selector:'body',html:'<script src=\"concat.js\">'}\n          ]\n        },\n        src: 'test/fixtures/order.html',\n        dest: 'tmp/order.html'\n      }\n    },\n    write_src: {\n      test: {\n        src: ['<%= dom_munger.data.links_order %>','<%= dom_munger.data.scripts_order %>']\n      }\n    },\n    concat: {\n      test: {\n        src:['test/fixtures/css0.css','<%= dom_munger.data.mylinks %>'],\n        dest:'tmp/concated.css'\n      },\n      test3: {\n        src:['<%= dom_munger.data.myscripts %>'],\n        dest:'tmp/concated.js'\n      }\n    },\n    // Unit tests.\n    nodeunit: {\n      tests: ['test/*_test.js'],\n    },\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n\n  grunt.registerMultiTask('write_src', 'Testing task.  Writes src files to file.', function() {\n    var fs = require('fs');\n    fs.writeFileSync('tmp/read_order.txt',JSON.stringify(this.filesSrc));\n  });\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('test', ['clean', 'dom_munger', 'write_src', 'concat', 'nodeunit']);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-dom-munger/node_modules/grunt-dom-munger/tasks/dom_munger.js":"/*\n * grunt-dom-munger\n * https://github.com/cgross/grunt-dom-munger\n *\n * Copyright (c) 2013 Chris Gross\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar cheerio = require('cheerio');\n\nvar toArray = function(value) {\n  return (Array.isArray(value)) ? value : [value];\n}\n\nmodule.exports = function(grunt) {\n\n  var processFile = function(f,dest,options,$,window){\n\n    grunt.log.subhead('Processing ' + f.cyan);\n\n    var updated = false;\n\n    if (options.read){\n      options.read = toArray(options.read);\n      options.read.forEach(function(option) {\n        if (!option.selector || !option.attribute || !option.writeto){\n          grunt.log.error('Read config missing selector, attribute, and/or writeto options');\n        } else {\n\n          var vals = $(option.selector).map(function(i,elem){\n            return $(elem).attr(option.attribute);\n          });\n\n          vals = vals.filter(function(item){\n            return item !== undefined;\n          });\n\n          if (option.isPath){\n            var relativeTo = path.dirname(grunt.file.expand(f));\n            vals = vals.map(function(val){\n              return path.join(relativeTo,val);\n            });\n          }\n\n          grunt.config(['dom_munger','data',option.writeto],vals);\n          grunt.log.writeln('Wrote ' + (option.selector + '.' + option.attribute).cyan + ' to ' + ('dom_munger.data.'+option.writeto).cyan);\n        }\n\n      });\n    }\n\n    if (options.remove){\n      options.remove = toArray(options.remove);\n      options.remove.forEach(function(option) {\n        $(option).remove();\n        grunt.log.writeln('Removed ' + option.cyan);\n        updated = true;\n      });\n    }\n\n    if (options.update){\n      options.update = toArray(options.update);\n      options.update.forEach(function(option) {\n        if (!option.selector || !option.attribute || !option.value){\n          grunt.log.error('Update config missing selector, attribute, and/or value options');\n        } else {\n          $(option.selector).attr(option.attribute,option.value);\n          grunt.log.writeln('Updated ' + option.attribute.cyan + ' to ' + option.value.cyan);\n          updated = true;\n        }\n      });\n    }\n\n    if (options.prefix){\n      options.prefix = toArray(options.prefix);\n      options.prefix.forEach(function(option) {\n        if (!option.selector || !option.attribute || !option.value){\n          grunt.log.error('Prefix config missing selector, attribute, and/or value options');\n        } else {\n          $(option.selector).each(function () {\n             $(this).attr(option.attribute, option.value + $(this).attr(option.attribute));\n          });\n          grunt.log.writeln('Prefixed ' + option.attribute.cyan + ' with ' + option.value.cyan);\n          updated = true;\n        }\n      });\n    }\n\n    if (options.suffix){\n      options.suffix = toArray(options.suffix);\n      options.suffix.forEach(function(option) {\n        if (!option.selector || !option.attribute || !option.value){\n          grunt.log.error('Suffix config missing selector, attribute, and/or value options');\n        } else {\n          $(option.selector).each(function () {\n             $(this).attr(option.attribute, $(this).attr(option.attribute) + option.value);\n          });\n          grunt.log.writeln('Suffixed ' + option.attribute.cyan + ' with ' + option.value.cyan);\n          updated = true;\n        }\n      });\n    }\n\n    if (options.append){\n      options.append = toArray(options.append);\n      options.append.forEach(function(option) {\n        if (!option.selector || !option.html){\n          grunt.log.error('Append config missing selector and/or html options');\n        } else {\n          $(option.selector).append(option.html);\n          grunt.log.writeln(\"Appended to \" + option.selector.cyan);\n          updated = true;\n        }\n      });\n    }\n\n    if (options.prepend){\n      options.prepend = toArray(options.prepend);\n      options.prepend.forEach(function(option) {\n        if (!option.selector || !option.html){\n          grunt.log.error('Prepend config missing selector and/or html options');\n        } else {\n          $(option.selector).prepend(option.html);\n          grunt.log.writeln(\"Prepended to \" + option.selector.cyan);\n          updated = true;\n        }\n      });\n    }\n\n    if (options.text){\n      options.text = toArray(options.text);\n      options.text.forEach(function(option) {\n        if (!option.selector || !option.text){\n          grunt.log.error('Text config missing selector and/or text options');\n        } else {\n          $(option.selector).text(option.text);\n          grunt.log.writeln('Applied text to ' + option.selector.cyan);\n          updated = true;\n        }\n      });\n    }\n\n    if (options.callback){\n       options.callback($, f);\n       //just assume its updating something\n       updated = true;\n    }\n\n    if (updated){\n      var updatedContents = $.html();\n      grunt.file.write(dest || f,updatedContents);\n      grunt.log.writeln('File ' + (dest || f).cyan + ' created/updated.');\n    }\n\n  };\n\n  grunt.registerMultiTask('dom_munger', 'Read and manipulate html.', function() {\n\n    var options = this.options({});\n    var done = this.async();\n\n    if (this.filesSrc.length > 1 && this.data.dest){\n      grunt.log.error('Dest cannot be specified with multiple src files.');\n      done(false);\n    }\n\n    this.files.forEach(function(f) {\n\n      var dest = f.dest;\n\n      f.src.filter(function(filepath) {\n        if (!grunt.file.exists(filepath)) {\n          grunt.log.warn('Source file \"' + filepath + '\" not found.');\n          return false;\n        } else {\n          return true;\n        }\n      }).forEach(function(f){\n\n        var srcContents = grunt.file.read(f);\n\n        var $ = cheerio.load(srcContents,{lowerCaseAttributeNames:false});\n        processFile(f,dest,options,$);\n\n      });\n    });\n\n    done();\n  });\n\n};\n"}